import { ReadPermission, Request, Session } from "../structs";
import { Address, HexString, Signature } from "../types";
/**
 * Validates that the given signature has been produced by signer
 * signing the provided data.
 * @param data Data that was signed by signer and generated signature
 * @param signature The signature of the data, produced by signer
 * @param signer The address of the signer
 * @throws {Error} if cant recover a signer from the given signature/data
 * @throws {Error} if recovered signer and provided signer don't match
 */
export declare function validateSignature(data: HexString<any>, signature: Signature, signer: Address): void;
/**
 * Validates the provided read permission
 * @throws {Error} expiration value is a past timestamp
 * @throws {Error} signature is not valid
 * @throws {Error} signature has not been generated by subject
 */
export declare function validateReadPermission(rp: ReadPermission): void;
/**
 * Validates the provided session
 * @throws {Error} signature is not valid
 * @throws {Error} signature has not been generated by subject
 */
export declare function validateSession(session: Session): void;
/**
 * Validates the provided request
 * @throws {Error} readPermission is not valid (see {@link validateReadPermission})
 * @throws {Error} session is not valid (see {@link validateSession})
 * @throws {Error} signature is not valid
 * @throws {Error} signature has not been generated by readPermission.reader
 */
export declare function validateRequest(req: Request): void;
